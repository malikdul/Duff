package com.duff.utils{import flash.display.Stage;import flash.events.MouseEvent;import flash.display.InteractiveObject;import flash.external.ExternalInterface;/*** Usage: Call MacMouseWheelHandler.init(stage); on your SWF's first STAGE_INIT event.*	* Inspired by Matt Giger http://www.earthbrowser.com/*/public class MacMouseWheelHandler{		private static var 	_init			: Boolean				= false;	private static var 	_currItem		: InteractiveObject;	private static var 	_clonedEvent	: MouseEvent;		 public static function 	init(stage:Stage):void	{		if(!_init)		{		//	_init = true;			stage.addEventListener(MouseEvent.MOUSE_MOVE, function(e:MouseEvent):void			{				_currItem = InteractiveObject(e.target);				_clonedEvent = MouseEvent(e);			});						// send in the callbacks			if(ExternalInterface.available)			{				var id:String = 'eb_' + Math.floor(Math.random()*1000000);				ExternalInterface.addCallback(id, function():void{});				ExternalInterface.call(c_jscode);				ExternalInterface.call("eb.InitMacMouseWheel", id);				ExternalInterface.addCallback('externalMouseEvent', _externalMouseEvent);				}		}	}		 private static function _externalMouseEvent(delta:Number):void	{		if(_currItem && _clonedEvent)			_currItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_WHEEL, true, false, 				_clonedEvent.localX, _clonedEvent.localY, _clonedEvent.relatedObject,				_clonedEvent.ctrlKey, _clonedEvent.altKey, _clonedEvent.shiftKey, _clonedEvent.buttonDown,				int(delta)));	}		// javascript mouse handling code	private static const c_jscode : XML = 	<script><![CDATA[		function()		{			// create unique namespace			if(typeof eb == "undefined" || !eb)	eb = {};						var userAgent = navigator.userAgent.toLowerCase();			eb.platform = {				win:/win/.test(userAgent),				mac:/mac/.test(userAgent)			};			eb.browser = {				version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],				safari: /webkit/.test(userAgent),				opera: /opera/.test(userAgent),				msie: /msie/.test(userAgent) && !/opera/.test(userAgent),				mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent),				chrome: /chrome/.test(userAgent)			};						// find the function we added			eb.findSwf = function(id) {				var objects = document.getElementsByTagName("object");				for(var i = 0; i < objects.length; i++)					if(typeof objects[i][id] != "undefined")						return objects[i];								var embeds = document.getElementsByTagName("embed");				for(var j = 0; j < embeds.length; j++)					if(typeof embeds[j][id] != "undefined")						return embeds[j];									return null;			}						eb.InitMacMouseWheel = function(id) {					var swf = eb.findSwf(id);				if(swf && eb.platform.mac) {										var mouseOver = false;					/// Mouse move detection for mouse wheel support					function _mousemove(event) {						mouseOver = event && event.target && (event.target == swf);					}					/// Mousewheel support					var _mousewheel = function(event) {						if(mouseOver) {							var delta = 0;							if(event.wheelDelta)		delta = event.wheelDelta / (eb.browser.opera ? 12 : 120);							else if(event.detail)		delta = -event.detail;							if(event.preventDefault)	event.preventDefault();							swf.externalMouseEvent(delta);							return true;						}						return false;					}					// install mouse listeners					if(typeof window.addEventListener != 'undefined') {						window.addEventListener('DOMMouseScroll', _mousewheel, false);						window.addEventListener('DOMMouseMove', _mousemove, false);					}					window.onmousewheel = document.onmousewheel = _mousewheel;					window.onmousemove = document.onmousemove = _mousemove;				}			}			}	]]></script>;}}