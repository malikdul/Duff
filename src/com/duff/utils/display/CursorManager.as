/** * @author borella*/package com.duff.utils.display{	import flash.ui.Mouse;	import flash.events.MouseEvent;	import flash.display.Stage;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.InteractiveObject;			public class CursorManager 	{		// ___________________________________________________________________________________ VARS PROPERTIES				public static var _root:Stage;		private static var _cursor:DisplayObject;		private static var _xOffset:Number;		private static var _yOffset:Number;		// ___________________________________________________________________________________ CONSTRUCTOR				public function CursorManager():void		{			throw new Error("static methods!");		}				// ___________________________________________________________________________________ PUBLIC METHODS				/**		 * init		 */		public static function init(scope:Stage, cursor:DisplayObject, mX:Number, mY:Number):void		{			if (!scope) throw new Error("scope is undefined");			_root = scope;			setCursor(cursor, mX, mY);		}				/**		 *  setCursor		 */		public static function setCursor(pCursor:DisplayObject, pXoffset:Number = 0, pYoffset:Number = 0):void		{			if (!_root) throw new Error("scope is undefined");			if (_cursor) destroy();						Mouse.hide();			_cursor = pCursor;						if (_cursor is InteractiveObject){				InteractiveObject(_cursor).mouseEnabled = false;				if (_cursor is DisplayObjectContainer) DisplayObjectContainer(_cursor).mouseChildren = false;			}						_xOffset = pXoffset;			_yOffset = pYoffset;			_cursor.x = _root.mouseX + _xOffset;			_cursor.y = _root.mouseY + _yOffset;			_root.addChild(_cursor);			_root.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);					}				/**		 * destroy		*/		public static function destroy():void		{			if (_cursor) removeCursor();		}				// ___________________________________________________________________________________ PRIVATE METHODS				/**		 * bringToFront		 */		public static function bringToFront():void		{			if (_cursor)_root.addChild(_cursor);		}				/**		 * removeCursor		 */		private static function removeCursor():void		{			if (!_cursor) return;			_root.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			_root.removeChild(_cursor);			_cursor = null;			Mouse.show();		}				// ___________________________________________________________________________________ EVENTS				/**		 * onMouseMove		*/				private static function onMouseMove(e:MouseEvent):void		{			_cursor.x = _root.mouseX + _xOffset;			_cursor.y = _root.mouseY + _yOffset;			e.updateAfterEvent();		}			}//-- end class}//-- end package