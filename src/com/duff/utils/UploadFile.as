/** * @author borella*/package com.duff.utils{	//______________________________________________________________________ IMPORTS	import flash.net.*;	import flash.events.*; 	public class UploadFile	{		// ___________________________________________________________________ PRIVATE PROPERTIES		private static var _fileR:FileReference = new FileReference();		private static var _urlUpload:String;				private static var _fnComplete:Function = null;		private static var _extTypes:String = "*.jpg;*.gif;*.png,*.jpeg"; //--- .ext default aceitas		private static var _btnUpload:*;		private static var _overHandler:Function;		private static var _outHandler:Function;		private static var _statusTxt:*;								//myFileReference.browse([imagesFilter, docFilter]);		// ___________________________________________________________________ PUBLIC PROPERTIES								public static var _nomeFinal:String;		public static var _progress:String;		public static var _statusMsgs:Object = {enviando:"Anexando arquivo...", 													sucesso:"foi anexado com sucesso.", 													erro:"Erro ao anexar o arquivo. Tente Novamente.",													padrao:"(Em jpg, png ou gif. Tamanho max. 2mb.)"};		public static var _btnTxts:Object = {padrao:"Anexar Foto",											   cancelar:"Cancelar Envio",											   repetir:"Anexar novamente"}; 				// ___________________________________________________________________ PUBLIC METHODS		/**		 * Função p/fazer upload de arquivos do computador do usuário p/ algum server		 * @param _infosObj é um objeto que armazena configurações do upload		 * @param _infosObj.mc (DisplayObject) Define o botão responsável iniciar a procura por arquivos no computador do usuário.		 * @param _infosObj.uploadFile (String) Define a url onde encontra-se o php responsável por mover e renomear o arquivo do upload. Ex: "www.meusite.com/uploadFile.php"		 * @param _infosObj._fileTypes (String) Define os tipos de extenções permitidos no upload. Ex: "*.jpg;*.gif;*.png,*.jpeg"		 * @param _infosObj.over (Function) Define o mouse handler over do botão. 		 * @param _infosObj.out (Function) Define o mouse handler out do botão.		 * @param _infosObj.statusTxt () Define o campo de texto que irá exibir as mensagens de estatus		 */		public static function setup(_infosObj:Object, fnComplete:Function=null):void		{			_btnUpload = _infosObj.mc;//---- define o botao de upload			_urlUpload = _infosObj.uploadFile;//---- define a url do uploadFile(php)			if(_infosObj._fileTypes)_extTypes = _infosObj.fileTypes;//---- define os tipos de extenções suportados			_overHandler = _infosObj.over;//---- define mouse handler over do bt upload			_outHandler = _infosObj.out;//---- define mouse handler off do bt upload			_statusTxt = _infosObj.statusTxt;//----  define o campo de texto que irá exibir as mensagens de estatus			_fnComplete = fnComplete; //---- define a função que será chamada quando o upload estiver completo			//---- inicia upload			setupUpload(); 		}				public static function cancel():void		{			_fileR.cancel();		} 				// ___________________________________________________________________ PRIVATE METHODS		private static function setupUpload():void		{			_btnUpload.texto_txt.text = _btnTxts.padrao;			_statusTxt.text = _statusMsgs.padrao;			//---- add mouse handlers			_btnUpload.addEventListener(MouseEvent.CLICK, startUpload);			_btnUpload.buttonMode = true;			_btnUpload.mouseChildren = false;			if(_overHandler!=null){				_btnUpload.addEventListener(MouseEvent.MOUSE_OVER, _overHandler);			}			if(_outHandler!=null)_btnUpload.addEventListener(MouseEvent.MOUSE_OUT, _outHandler);			//---- fr			_fileR.addEventListener(Event.SELECT, selectFile);			_fileR.addEventListener(ProgressEvent.PROGRESS, progressUpload);			_fileR.addEventListener(Event.COMPLETE, completeUpload);					}  		private static function startUpload(e:Event):void		{			_statusTxt.text = _statusMsgs.padrao;			var _imagesTypes:FileFilter = new FileFilter("Imagens", _extTypes);			_fileR.browse([_imagesTypes]);		} 		private static function selectFile(e:Event):void		{				//			_statusTxt.text = _statusMsgs.enviando;			_btnUpload.texto_txt.text = _btnTxts.cancelar;						//---- pega o nome original do arquivo			var nomeOriginal:String = _fileR.name;			//---- pega extenção do arquivo			var extOriginal:String = ("."+nomeOriginal.substring(nomeOriginal.lastIndexOf(".")+1, nomeOriginal.length));			//---- gera nome randomico p/a foto			var _data:Date  = new Date();	 		_nomeFinal = ( "img_"+String(_data.date)+"_"+ String(_data.month)+"__"+String(_data.hours)+"_"+String(_data.minutes) +"__"+ Math.round(9999999999*Math.random())+ extOriginal);			var _url:String = (_urlUpload+"?nome="+nomeOriginal+"&nomeFinal="+_nomeFinal);			//---- faz o upload do arquivo pro servidor			_fileR.upload(new URLRequest(_url));		} 		private static function progressUpload(e:ProgressEvent):String		{			//-- funciona somente em windows			_progress = String(Math.round(e.bytesLoaded / e.bytesTotal) * 100);			return _progress;			//trace("fazendo upload..",_progress)		} 		public static function completeUpload(e:Event):void		{			_statusTxt.text = '"'+_fileR.name+'"'+" "+_statusMsgs.sucesso;			_btnUpload.texto_txt.text = _btnTxts.padrao;			if(_fnComplete!=null) _fnComplete();		}	}}