/*** author borella*/package com.duff.utils.form{	public class Validator	{				private static var _reg	: RegExp;				// ___________________________________________________________________ PUBLIC METHODS						/**		 * Validate the email		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */				 public static function email (value:String) : Boolean		{			return (_reg = /^[a-z][\w.-]+@\w[\w.-]+\.[\w.-]*[a-z][a-z]$/i).test(value);		}						/**		 * Validate the birthdate		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function birthdate (value:String) : Boolean		{			var test1:Boolean = (_reg = /^(((0[1-9]|[12][0-9]|3[01])([\/])(0[13578]|10|12)([\/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([\/])(0[469]|11)([\/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([\/])(02)([\/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\-)(02)([\/])([02468][048]00))|((29)([\/])(02)([\/])([13579][26]00))|((29)([\/])(02)([\/])([0-9][0-9][0][48]))|((29)([\/])(02)([\/])([0-9][0-9][2468][048]))|((29)([\/])(02)([\/])([0-9][0-9][13579][26])))$/i).test(value);						if(!test1) return false;						var teste2:String = (value.toString()).substr(6,10);						if((2011 - Number(teste2))  >= 18){				return true;			}else			{				return false;			}																		//return (_reg = /^(((0[1-9]|[12][0-9]|3[01])([\/])(0[13578]|10|12)([\/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([\/])(0[469]|11)([\/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([\/])(02)([\/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\-)(02)([\/])([02468][048]00))|((29)([\/])(02)([\/])([13579][26]00))|((29)([\/])(02)([\/])([0-9][0-9][0][48]))|((29)([\/])(02)([\/])([0-9][0-9][2468][048]))|((29)([\/])(02)([\/])([0-9][0-9][13579][26])))$/i).test(value);		}						/**		 * Validate the cpf		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function cpf (value:String) : Boolean		{			return (_reg = /^(\d{3}.\d{3}.\d{3}-\d{2})|(\d{11})$/i).test(value);		}				public static function isCpf(cpf : String) : Boolean { 			if (cpf.length != 11){				trace(">>>> VALIDACAO | diferente de 11 | "+cpf);				return false;			}						//Anula Cpf`s com mesmo numero 11111111111			var firstLetter : String = cpf.charAt(0);			var testEqualsCpf : Number = replaceAll(cpf, firstLetter, "").length;			if (testEqualsCpf == 0)				return false; 						var multiplier:Array = [10,9,8,7,6,5,4,3,2];			var v1:Number = Number(cpf.charAt(9));			var v2:Number = Number(cpf.charAt(10));			var r:Number = 0;						// Calculo do primeiro v			for (var i:int = 0; i < multiplier.length; i++){				r += Number(cpf.charAt(i)) * multiplier[i];				multiplier[i] += 1;			}			r %= 11;			r = r < 2 ? 0 : 11 - r;			if (r != v1)				return false;							// Calculo do segundo v			multiplier.push(2);			r = 0;			for (i = 0; i < multiplier.length; i++){				r += Number(cpf.charAt(i)) * multiplier[i];			}			r %= 11;			r = r < 2 ? 0 : 11 - r;			if (r == v2)				return true;			else				return false;		}										/**		 * Validate the cep		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function cep (value:String) : Boolean		{			return (_reg = /^[0-9]{5}\-[0-9]{3}$/i).test(value);		}						/**		 * Validate the phone		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function phone (value:String) : Boolean		{			return (value.length == 8 && !isNaN(int(value)));		}						/**		 * Validate the cnpj		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function cnpj (value:String) : Boolean		{			return false;		}						/**		 * Validate the rg		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function rg (value:String) : Boolean		{			return (value.length == 10 && !isNaN(int(value)));		}				/**		 * Validate the ddd		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function ddd (value:String) : Boolean		{			return (value.length == 2 && !isNaN(int(value)));		}				/**		 * Validate the foot number		 * @param	value		 * @return TRUE if it's ok and FALSE if it have errors		 */		public static function footNumber (value:String) : Boolean		{			return (value.length == 2 && !isNaN(int(value)));		}								/**		* Check if the parameter passed is an empty String		* @param	value		* @return FALSE/TRUE		*/		public static function empty(value:String) : Boolean		{			return (!(value == ""));		}				public static function replaceAll (str : String, pattern : String, to : String) : String { 			while (str.indexOf(pattern) != -1) {				str = str.replace (pattern, to); 			}			return str;		}			}}